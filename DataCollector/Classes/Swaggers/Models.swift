// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [DataCollectorBaseRequest]
        Decoders.addDecoder(clazz: [DataCollectorBaseRequest].self) { (source: AnyObject) -> [DataCollectorBaseRequest] in
            return Decoders.decode(clazz: [DataCollectorBaseRequest].self, source: source)
        }
        // Decoder for DataCollectorBaseRequest
        Decoders.addDecoder(clazz: DataCollectorBaseRequest.self) { (source: AnyObject) -> DataCollectorBaseRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorBaseRequest()
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorBatchRequest]
        Decoders.addDecoder(clazz: [DataCollectorBatchRequest].self) { (source: AnyObject) -> [DataCollectorBatchRequest] in
            return Decoders.decode(clazz: [DataCollectorBatchRequest].self, source: source)
        }
        // Decoder for DataCollectorBatchRequest
        Decoders.addDecoder(clazz: DataCollectorBatchRequest.self) { (source: AnyObject) -> DataCollectorBatchRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorBatchRequest()
            instance.batch = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["batch"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorBeginTransactionRequest]
        Decoders.addDecoder(clazz: [DataCollectorBeginTransactionRequest].self) { (source: AnyObject) -> [DataCollectorBeginTransactionRequest] in
            return Decoders.decode(clazz: [DataCollectorBeginTransactionRequest].self, source: source)
        }
        // Decoder for DataCollectorBeginTransactionRequest
        Decoders.addDecoder(clazz: DataCollectorBeginTransactionRequest.self) { (source: AnyObject) -> DataCollectorBeginTransactionRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorBeginTransactionRequest()
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeout"] as AnyObject?)
            if let timeoutMode = sourceDictionary["timeoutMode"] as? String { 
                instance.timeoutMode = DataCollectorBeginTransactionRequest.TimeoutMode(rawValue: (timeoutMode))
            }
            
            instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionId"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorEndTransactionRequest]
        Decoders.addDecoder(clazz: [DataCollectorEndTransactionRequest].self) { (source: AnyObject) -> [DataCollectorEndTransactionRequest] in
            return Decoders.decode(clazz: [DataCollectorEndTransactionRequest].self, source: source)
        }
        // Decoder for DataCollectorEndTransactionRequest
        Decoders.addDecoder(clazz: DataCollectorEndTransactionRequest.self) { (source: AnyObject) -> DataCollectorEndTransactionRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorEndTransactionRequest()
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionId"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorNewDeviceRequest]
        Decoders.addDecoder(clazz: [DataCollectorNewDeviceRequest].self) { (source: AnyObject) -> [DataCollectorNewDeviceRequest] in
            return Decoders.decode(clazz: [DataCollectorNewDeviceRequest].self, source: source)
        }
        // Decoder for DataCollectorNewDeviceRequest
        Decoders.addDecoder(clazz: DataCollectorNewDeviceRequest.self) { (source: AnyObject) -> DataCollectorNewDeviceRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorNewDeviceRequest()
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorNewUserRequest]
        Decoders.addDecoder(clazz: [DataCollectorNewUserRequest].self) { (source: AnyObject) -> [DataCollectorNewUserRequest] in
            return Decoders.decode(clazz: [DataCollectorNewUserRequest].self, source: source)
        }
        // Decoder for DataCollectorNewUserRequest
        Decoders.addDecoder(clazz: DataCollectorNewUserRequest.self) { (source: AnyObject) -> DataCollectorNewUserRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorNewUserRequest()
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorTuneRequest]
        Decoders.addDecoder(clazz: [DataCollectorTuneRequest].self) { (source: AnyObject) -> [DataCollectorTuneRequest] in
            return Decoders.decode(clazz: [DataCollectorTuneRequest].self, source: source)
        }
        // Decoder for DataCollectorTuneRequest
        Decoders.addDecoder(clazz: DataCollectorTuneRequest.self) { (source: AnyObject) -> DataCollectorTuneRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorTuneRequest()
            instance.campaignName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["campaignName"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorUpdateCollectionRequest]
        Decoders.addDecoder(clazz: [DataCollectorUpdateCollectionRequest].self) { (source: AnyObject) -> [DataCollectorUpdateCollectionRequest] in
            return Decoders.decode(clazz: [DataCollectorUpdateCollectionRequest].self, source: source)
        }
        // Decoder for DataCollectorUpdateCollectionRequest
        Decoders.addDecoder(clazz: DataCollectorUpdateCollectionRequest.self) { (source: AnyObject) -> DataCollectorUpdateCollectionRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorUpdateCollectionRequest()
            instance.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"] as AnyObject?)
            instance.balanceModification = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balanceModification"] as AnyObject?)
            instance.currency = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["currency"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorUpdateDeviceStateRequest]
        Decoders.addDecoder(clazz: [DataCollectorUpdateDeviceStateRequest].self) { (source: AnyObject) -> [DataCollectorUpdateDeviceStateRequest] in
            return Decoders.decode(clazz: [DataCollectorUpdateDeviceStateRequest].self, source: source)
        }
        // Decoder for DataCollectorUpdateDeviceStateRequest
        Decoders.addDecoder(clazz: DataCollectorUpdateDeviceStateRequest.self) { (source: AnyObject) -> DataCollectorUpdateDeviceStateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorUpdateDeviceStateRequest()
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorUpdateTransactionRequest]
        Decoders.addDecoder(clazz: [DataCollectorUpdateTransactionRequest].self) { (source: AnyObject) -> [DataCollectorUpdateTransactionRequest] in
            return Decoders.decode(clazz: [DataCollectorUpdateTransactionRequest].self, source: source)
        }
        // Decoder for DataCollectorUpdateTransactionRequest
        Decoders.addDecoder(clazz: DataCollectorUpdateTransactionRequest.self) { (source: AnyObject) -> DataCollectorUpdateTransactionRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorUpdateTransactionRequest()
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionId"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [DataCollectorUpdateUserStateRequest]
        Decoders.addDecoder(clazz: [DataCollectorUpdateUserStateRequest].self) { (source: AnyObject) -> [DataCollectorUpdateUserStateRequest] in
            return Decoders.decode(clazz: [DataCollectorUpdateUserStateRequest].self, source: source)
        }
        // Decoder for DataCollectorUpdateUserStateRequest
        Decoders.addDecoder(clazz: DataCollectorUpdateUserStateRequest.self) { (source: AnyObject) -> DataCollectorUpdateUserStateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DataCollectorUpdateUserStateRequest()
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }


        // Decoder for [NewEventRequest]
        Decoders.addDecoder(clazz: [NewEventRequest].self) { (source: AnyObject) -> [NewEventRequest] in
            return Decoders.decode(clazz: [NewEventRequest].self, source: source)
        }
        // Decoder for NewEventRequest
        Decoders.addDecoder(clazz: NewEventRequest.self) { (source: AnyObject) -> NewEventRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = NewEventRequest()
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.eventProperties = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["eventProperties"] as AnyObject?)
            instance.eventTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventTimestamp"] as AnyObject?)
            instance.requestType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestType"] as AnyObject?)
            instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?)
            instance.sendTimestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sendTimestamp"] as AnyObject?)
            instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionId"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            return instance
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
