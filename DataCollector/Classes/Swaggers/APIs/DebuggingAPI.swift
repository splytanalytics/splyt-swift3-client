//
// DebuggingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DebuggingAPI: APIBase {
    /**
     Disable debugging via Redis
     
     - parameter customerId: (path) ID of the customer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableDebugger(customerId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        disableDebuggerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Disable debugging via Redis
     - DELETE /v2/_debug/{customerId}
     - Forces debugging to be disabled for the customer
     
     - parameter customerId: (path) ID of the customer 

     - returns: RequestBuilder<Void> 
     */
    open class func disableDebuggerWithRequestBuilder(customerId: String) -> RequestBuilder<Void> {
        var path = "/v2/_debug/{customerId}"
        path = path.replacingOccurrences(of: "{customerId}", with: "\(customerId)", options: .literal, range: nil)
        let URLString = DataCollectorAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = DataCollectorAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable debugging via Redis
     
     - parameter customerId: (path) ID of the customer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableDebugger(customerId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        enableDebuggerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Enable debugging via Redis
     - POST /v2/_debug/{customerId}
     - Debugging is only enabled for a limited period of time (default is one hour)
     
     - parameter customerId: (path) ID of the customer 

     - returns: RequestBuilder<Void> 
     */
    open class func enableDebuggerWithRequestBuilder(customerId: String) -> RequestBuilder<Void> {
        var path = "/v2/_debug/{customerId}"
        path = path.replacingOccurrences(of: "{customerId}", with: "\(customerId)", options: .literal, range: nil)
        let URLString = DataCollectorAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = DataCollectorAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
